{"version":3,"sources":["../src/index.js"],"names":["CreateTextSplit","element","className","activeClass","options","el","classList","add","remove","arr","stagger","map","innerHTML","children","querySelectorAll","forEach","child","index","itemStagger","style","cssText","letters","innerText","split","handleSplit","console","error","words","newWordsArr","word","push"],"mappings":";;;;;;;;;;;;;IAAaA;AACT,6BAAc;AAAA;;AACV,SAAKC,OAAL;AACA,SAAKC,SAAL;AACA,SAAKC,WAAL;AACH;;;;2BAEMC,SAAS;AACZ,UAAIA,OAAO,CAACC,EAAZ,EAAgB;AACZ,aAAKJ,OAAL,GAAeG,OAAO,CAACC,EAAvB;AACH;;AACD,UAAID,OAAO,CAACD,WAAZ,EAAyB;AACrB,aAAKA,WAAL,GAAmBC,OAAO,CAACD,WAA3B;AACH;AACJ;;;uCAEkB;AACf,WAAKF,OAAL,CAAaK,SAAb,CAAuBC,GAAvB,CAA2B,KAAKJ,WAAhC;AACH;;;wCAEmB;AAChB,WAAKF,OAAL,CAAaK,SAAb,CAAuBE,MAAvB,CAA8B,KAAKL,WAAnC;AACH;;;gCAEWM,KAAKP,WAAWQ,SAAS;AAAA;;AACjCD,MAAAA,GAAG,CAACE,GAAJ,CAAQ,UAACN,EAAD,EAAQ;AACZ,YAAIA,EAAE,KAAK,GAAX,EAAgB;AACZA,UAAAA,EAAE,GAAG,QAAL;AACH;;AACD,QAAA,KAAI,CAACJ,OAAL,CAAaW,SAAb,0BAAyCV,SAAzC,cAAsDG,EAAtD;AACH,OALD,EADiC,CAQjC;;AACA,UAAMQ,QAAQ,GAAG,KAAKZ,OAAL,CAAaa,gBAAb,YAAkCZ,SAAlC,EAAjB;AAEAW,MAAAA,QAAQ,CAACE,OAAT,CAAiB,UAACC,KAAD,EAAQC,KAAR,EAAkB;AAC/B,YAAIC,WAAW,GAAGR,OAAO,GAAGO,KAA5B;AAEAD,QAAAA,KAAK,CAACG,KAAN,CAAYC,OAAZ,qDAC4BF,WAD5B,sDAE2BA,WAF3B;AAKH,OARD;AASH;;;wCAEqC;AAAA,UAAtBR,OAAsB,QAAtBA,OAAsB;AAAA,UAAbR,SAAa,QAAbA,SAAa;;AAClC,UAAI,KAAKD,OAAT,EAAkB;AACd,YAAMoB,OAAO,GAAG,KAAKpB,OAAL,CAAaqB,SAAb,CAAuBC,KAAvB,CAA6B,EAA7B,CAAhB,CADc,CAEd;;AACA,aAAKtB,OAAL,CAAaW,SAAb,GAAyB,EAAzB;AAEA,aAAKY,WAAL,CAAiBH,OAAjB,EAA0BnB,SAA1B,EAAqCQ,OAArC;AAEH,OAPD,MAOO;AACHe,QAAAA,OAAO,CAACC,KAAR,CAAc,mDAAd;AACH;AACJ;;;uCAEmC;AAAA,UAAtBhB,OAAsB,SAAtBA,OAAsB;AAAA,UAAbR,SAAa,SAAbA,SAAa;;AAChC,UAAI,KAAKD,OAAT,EAAkB;AACd,YAAM0B,KAAK,GAAG,KAAK1B,OAAL,CAAaqB,SAAb,CAAuBC,KAAvB,CAA6B,GAA7B,CAAd,CADc,CAEd;;AACA,aAAKtB,OAAL,CAAaW,SAAb,GAAyB,EAAzB,CAHc,CAKd;;AACA,YAAIgB,WAAW,GAAG,EAAlB;AAEAD,QAAAA,KAAK,CAAChB,GAAN,CAAU,UAAAkB,IAAI,EAAI;AACdD,UAAAA,WAAW,CAACE,IAAZ,CAAiBD,IAAjB;AACAD,UAAAA,WAAW,CAACE,IAAZ,CAAiB,QAAjB;AACH,SAHD;AAKA,aAAKN,WAAL,CAAiBI,WAAjB,EAA8B1B,SAA9B,EAAyCQ,OAAzC;AAEH,OAfD,MAeO;AACHe,QAAAA,OAAO,CAACC,KAAR,CAAc,mDAAd;AACH;AACJ","file":"src.7ed060e2.js","sourceRoot":"../docs","sourcesContent":["export class CreateTextSplit {\n    constructor() {\n        this.element;\n        this.className;\n        this.activeClass;\n    }\n\n    config(options) {\n        if (options.el) {\n            this.element = options.el;\n        }\n        if (options.activeClass) {\n            this.activeClass = options.activeClass;\n        }\n    }\n\n    applyActiveClass() {\n        this.element.classList.add(this.activeClass);\n    }\n\n    removeActiveClass() {\n        this.element.classList.remove(this.activeClass);\n    }\n\n    handleSplit(arr, className, stagger) {\n        arr.map((el) => {\n            if (el === ' ') {\n                el = '&nbsp;'\n            }\n            this.element.innerHTML += `<span class=${className}>${el}</span>`\n        })\n\n        // Add the delays to the children of the arr\n        const children = this.element.querySelectorAll(`.${className}`);\n\n        children.forEach((child, index) => {\n            let itemStagger = stagger * index;\n\n            child.style.cssText = `\n                    transition-delay: ${itemStagger}s;\n                    animation-delay: ${itemStagger}s;\n                    display: inline-block;\n                `\n        })\n    }\n\n    splitByLetter({ stagger, className }) {\n        if (this.element) {\n            const letters = this.element.innerText.split('');\n            // Clear the element\n            this.element.innerHTML = ''\n\n            this.handleSplit(letters, className, stagger)\n\n        } else {\n            console.error('NO ELEMENT FOUND: Add one using the config method')\n        }\n    }\n\n    splitByWord({ stagger, className }) {\n        if (this.element) {\n            const words = this.element.innerText.split(' ');\n            // Clear the element\n            this.element.innerHTML = ''\n\n            // Handle the spaces between the words by add nbsp;\n            let newWordsArr = [];\n\n            words.map(word => {\n                newWordsArr.push(word);\n                newWordsArr.push('&nbsp;')\n            })\n\n            this.handleSplit(newWordsArr, className, stagger)\n\n        } else {\n            console.error('NO ELEMENT FOUND: Add one using the config method')\n        }\n    }\n}\n"]}